{"version":3,"sources":["themes.ts","components/button/button.styles.tsx","components/button/button.tsx","components/typography/typography.styles.tsx","components/typography/typography.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lightTheme","borderRadius","colors","main","secondary","type","h1","size","color","h2","Button","styled","button","props","theme","label","Typography","p","as","undefined","children","Wrapper","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAEaA,EAA2B,CACtCC,aAAc,MAEdC,OAAQ,CACNC,KAAM,QACNC,UAAW,SAGbC,KAAM,CACJC,GAAI,CACFC,KAAM,OACNC,MAAO,UAETC,GAAI,CACFF,KAAM,OACNC,MAAO,UCfAE,EAASC,IAAOC,OAAV,4IACG,SAACC,GAAD,OAAWA,EAAMC,MAAMZ,OAAOE,aACzC,SAACS,GAAD,OAAWA,EAAMC,MAAMZ,OAAOC,QACnB,SAACU,GAAD,OAAWA,EAAMC,MAAMZ,OAAOE,aACjC,SAACS,GAAD,OAAWA,EAAMC,MAAMb,gB,OCA7BS,EAAS,SAAC,GAA4B,IAA1BK,EAAyB,EAAzBA,MACvB,OAAO,cAAC,EAAD,UAAgBA,KCJZC,EAAaL,IAAOM,EAAV,8DACZ,gBAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,MAAP,YAA0BK,IAAPD,GAAoBJ,EAAMT,KAAKa,GAAIV,SAClD,gBAAGU,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,MAAP,YAA0BK,IAAPD,GAAoBJ,EAAMT,KAAKa,GAAIX,QCGxDS,EAAa,SAAC,GAAuC,IAArCI,EAAoC,EAApCA,SAAUF,EAA0B,EAA1BA,GACrC,OAAO,cAAC,EAAD,CAAmBA,GAAIA,EAAvB,SAA4BE,KCH/BC,EAAUV,IAAOR,KAAV,8FACS,SAACU,GAAD,OAAWA,EAAMC,MAAMZ,OAAOC,QAKvCmB,EAAM,WACjB,OACE,cAAC,IAAD,CAAeR,MAAOd,EAAtB,SACE,eAACqB,EAAD,CAASE,UAAU,MAAnB,UACE,cAAC,EAAD,CAAYL,GAAG,KAAf,0BACA,cAAC,EAAD,CAAQH,MAAO,eCHRS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26cb70fd.chunk.js","sourcesContent":["import { DefaultTheme } from 'styled-components'\n\nexport const lightTheme: DefaultTheme = {\n  borderRadius: '4px',\n\n  colors: {\n    main: 'white',\n    secondary: 'black',\n  },\n\n  type: {\n    h1: {\n      size: '32px',\n      color: 'purple',\n    },\n    h2: {\n      size: '24px',\n      color: 'blue',\n    },\n  },\n}\n","import styled from 'styled-components'\n\nexport const Button = styled.button`\n  background-color: ${(props) => props.theme.colors.secondary};\n  color: ${(props) => props.theme.colors.main};\n  border: 1px solid ${(props) => props.theme.colors.secondary};\n  border-radius: ${(props) => props.theme.borderRadius};\n  padding: 4px 12px;\n`\n","import React from 'react'\nimport * as Styled from './button.styles'\ninterface buttonProps {\n  label: string\n}\n\nexport const Button = ({ label }: buttonProps) => {\n  return <Styled.Button>{label}</Styled.Button>\n}\n","import styled from 'styled-components'\nimport { typographyProps } from './typography'\n\nexport const Typography = styled.p<typographyProps>`\n  color: ${({ as, theme }) => as !== undefined && theme.type[as].color};\n  font-size: ${({ as, theme }) => as !== undefined && theme.type[as].size};\n`\n","import React from 'react'\nimport * as Styled from './typography.styles'\n\nexport interface typographyProps {\n  children: React.ReactNode\n  as: 'h1' | 'h2'\n}\n\nexport const Typography = ({ children, as }: typographyProps) => {\n  return <Styled.Typography as={as}>{children}</Styled.Typography>\n}\n","import React from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { lightTheme } from './themes'\nimport { Button } from './components/button/button'\nimport { Typography } from './components/typography/typography'\n\nconst Wrapper = styled.main`\n  background-color: ${(props) => props.theme.colors.main};\n  margin: 0 auto;\n  max-width: 900px;\n`\n\nexport const App = () => {\n  return (\n    <ThemeProvider theme={lightTheme}>\n      <Wrapper className='App'>\n        <Typography as='h2'>iamtomnewton</Typography>\n        <Button label={'test'} />\n      </Wrapper>\n    </ThemeProvider>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}